import streamlit as st
import requests
import json
import os
import base64
import hmac
import openai
import tempfile
from datetime import datetime
import pandas as pd
from pyairtable import Api
from pyairtable.formulas import match
from report_generator import generate_dental_report

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Zahnarztpraxis System",
    page_icon="ü¶∑",
    layout="centered"
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º CSS –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
def load_css(css_file):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    css_path = os.path.join(current_dir, css_file)
    with open(css_path, 'r', encoding='utf-8') as f:
        css_content = f.read()
        return css_content

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
try:
    css_content = load_css('styles.css')
    st.markdown(f'<style>{css_content}</style>', unsafe_allow_html=True)
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if 'auth_status' not in st.session_state:
    st.session_state.auth_status = "unverified"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å secrets)
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª—è –≤ secrets, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    APP_PASSWORD = st.secrets["password"]
except Exception:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    APP_PASSWORD = ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def check_password():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if hmac.compare_digest(st.session_state.password, APP_PASSWORD):
        st.session_state.auth_status = "verified"
    else:
        st.session_state.auth_status = "incorrect"
        # st.session_state.password = APP_PASSWORD

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
def login_prompt():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–æ–π
    with st.container():
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
            st.markdown("""
            <div style="padding: 30px; border-radius: 12px; border: 1px solid #e6e6e6; 
                        margin-top: 50px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); 
                        background-color: white;">
                <div style="text-align: center; margin-bottom: 30px;">
                    <h1 style="color: #2c3e50; font-size: 28px; margin-bottom: 5px;">ü¶∑ Zahnarztpraxis</h1>
                    <p style="color: #7f8c8d; font-size: 16px;">Bitte melden Sie sich an, um fortzufahren</p>
                </div>
            """, unsafe_allow_html=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ª–∏–Ω–∏—é-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            st.markdown("""
            <div style="border-bottom: 1px solid #eaeaea; margin-bottom: 25px;"></div>
            """, unsafe_allow_html=True)
            
            # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
            with st.form("login_form"):
                st.text_input(
                    "Passwort", 
                    type="password", 
                    key="password",
                    help="Geben Sie das Passwort ein, um auf das System zuzugreifen"
                )
                
                # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —Å–æ —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                submit = st.form_submit_button(
                    "Anmelden", 
                    use_container_width=True,
                    type="primary"
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
                st.markdown("""
                <style>
                    .stButton button[data-testid="FormSubmitButton"] {
                        background-color: #4CAF50 !important;
                        color: white !important;
                        border: none !important;
                    }
                    .stButton button[data-testid="FormSubmitButton"]:hover {
                        background-color: #45a049 !important;
                        color: white !important;
                    }
                </style>
                """, unsafe_allow_html=True)
                
                if submit:
                    check_password()
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ
            if st.session_state.auth_status == "incorrect":
                st.error("‚ùå Falsches Passwort. Bitte versuchen Sie es erneut.")
            
            # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            st.markdown("</div>", unsafe_allow_html=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç –≤–Ω–∏–∑—É
            st.markdown("""
            <div style="text-align: center; margin-top: 20px; color: #95a5a6; font-size: 12px;">
                <p>Version 1.0.0 ¬© 2024 Dental System</p>
            </div>
            """, unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
def logout():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    st.session_state.auth_status = "unverified"
    st.rerun()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
if st.session_state.auth_status != "verified":
    login_prompt()
    st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
col1, col2 = st.columns([5, 1])
with col1:
    st.title("ü¶∑ Zahnarztpraxis System")
with col2:
    st.button("Abmelden", on_click=logout, key="logout_button")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airtable
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ –∏–∑ secrets
    AIRTABLE_API_KEY = st.secrets["airtable_api_key"]
    AIRTABLE_BASE_ID = st.secrets["airtable_base_id"]
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á OpenAI –∏–∑ secrets
    OPENAI_API_KEY = st.secrets["openai_api_key"]
    openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)
except Exception:
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if os.environ.get("STREAMLIT_ENV") == "development":
        print("–í–Ω–∏–º–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è API –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ secrets.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Airtable API
airtable = Api(AIRTABLE_API_KEY)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI API
def transcribe_audio_with_openai(audio_data):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è OpenAI Whisper API
    
    Args:
        audio_data: –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        
    Returns:
        –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    if not OPENAI_API_KEY:
        return "–û—à–∏–±–∫–∞: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ secrets."
    
    if not openai_client:
        return "–û—à–∏–±–∫–∞: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
    
    try:
        transcription = openai_client.audio.transcriptions.create(
            model="gpt-4o-transcribe", 
            file=audio_data, 
            response_format="text"
        )
        print(transcription)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        return transcription
    
    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Airtable
def get_doctors():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤ –∏–∑ Airtable"""
    try:
        table = airtable.table(AIRTABLE_BASE_ID, "Doctors")
        records = table.all()
        
        doctors = []
        for record in records:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ fields –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "fields" in record:
                doctors.append({
                    "id": record["fields"].get("doctorId", ""),
                    "name": record["fields"].get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
                    "specialization": record["fields"].get("specialization", "")
                })
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(doctors)} –¥–æ–∫—Ç–æ—Ä–æ–≤")
        return pd.DataFrame(doctors)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—Ç–æ—Ä–æ–≤: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        return pd.DataFrame(columns=["id", "name", "specialization"])

def get_patients():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ Airtable"""
    try:
        table = airtable.table(AIRTABLE_BASE_ID, "Patients")
        records = table.all()
        
        patients = []
        for record in records:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ fields –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "fields" in record:
                # ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ –≤ Airtable
                patient_id = record["fields"].get("patientId")
                patients.append({
                    "id": patient_id,
                    "patient_code": patient_id  # ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫–∞–∫ —á–∏—Å–ª–æ
                })
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(patients)} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        return pd.DataFrame(patients)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        return pd.DataFrame(columns=["id", "patient_code"])

def create_patient(patient_code=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ Airtable –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞"""
    table = airtable.table(AIRTABLE_BASE_ID, "Patients")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patients_df = get_patients()
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
    if not patient_code:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID
        if not patients_df.empty:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ ID –≤ —á–∏—Å–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ
            patient_ids = []
            for pid in patients_df["id"]:
                try:
                    if isinstance(pid, (str, int)) and str(pid).isdigit():
                        patient_ids.append(int(pid))
                except:
                    pass
            
            if patient_ids:
                next_num = max(patient_ids) + 1
            else:
                next_num = 1
        else:
            next_num = 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞–∫ —á–∏—Å–ª–æ
        patient_code = next_num
    else:
        # –ï—Å–ª–∏ –∫–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
        try:
            patient_code = int(patient_code)
        except ValueError:
            return {
                "success": False,
                "error": "Patienten-ID muss eine Zahl sein"
            }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    patient_data = {
        "patientId": patient_code,  # –ß–∏—Å–ª–æ–≤–æ–π ID
        "createdAt": datetime.now().strftime("%Y-%m-%d")
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
        record = table.create(patient_data)
        
        return {
            "success": True,
            "patientId": patient_code,
            "record_id": record["id"]
        }
    except Exception as e:
        print(f"Fehler beim Erstellen des Patienten: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        }

def get_procedures():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–∑ Airtable"""
    table = airtable.table(AIRTABLE_BASE_ID, "Procedures")
    records = table.all()
    
    procedures = []
    for record in records:
        procedures.append({
            "id": record["fields"].get("procedureId"),
            "category": record["fields"].get("category"),
            "name": record["fields"].get("name"),
            "description": record["fields"].get("description")
        })
    
    return pd.DataFrame(procedures)

def create_session(doctor_id, patient_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ Airtable"""
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: doctor_id={doctor_id}, patient_id={patient_id}")
        print(f"–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: doctor_id={type(doctor_id)}, patient_id={type(patient_id)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Sessions
        sessions_table = airtable.table(AIRTABLE_BASE_ID, "Sessions")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ–∫—Ç–æ—Ä–∞ –ø–æ doctorId
        doctors_table = airtable.table(AIRTABLE_BASE_ID, "Doctors")
        doctors = doctors_table.all(formula=f"{{doctorId}}='{doctor_id}'")
        
        if not doctors:
            return {
                "success": False,
                "message": f"–î–æ–∫—Ç–æ—Ä —Å ID {doctor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        doctor_record_id = doctors[0]["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ patientId (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
        patients_table = airtable.table(AIRTABLE_BASE_ID, "Patients")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ patient_id
        if isinstance(patient_id, str) and patient_id.isdigit():
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            formula = f"{{patientId}}={int(patient_id)}"
        elif isinstance(patient_id, (int, float)):
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            formula = f"{{patientId}}={patient_id}"
        else:
            # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            formula = f"{{patientId}}='{patient_id}'"
        
        patients = patients_table.all(formula=formula)
        
        if not patients:
            return {
                "success": False,
                "message": f"–ü–∞—Ü–∏–µ–Ω—Ç —Å ID {patient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        patient_record_id = patients[0]["id"]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
        session_id = f"S{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–≤—è–∑–µ–π
        record_data = {
            "sessionId": session_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            "date": datetime.now().strftime("%Y-%m-%d"),
            "doctorId": [doctor_record_id],  # –ú–∞—Å—Å–∏–≤ —Å ID –∑–∞–ø–∏—Å–∏ –¥–æ–∫—Ç–æ—Ä–∞
            "patientId": [patient_record_id]  # –ú–∞—Å—Å–∏–≤ —Å ID –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        }
        
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {record_data}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        record = sessions_table.create(record_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "success": True,
            "sessionId": session_id,
            "record_id": record["id"]
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}"
        }

def add_procedure_to_session(session_id, procedure_id, procedure_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –∫ —Å–µ—Å—Å–∏–∏"""
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: session_id={session_id}, procedure_id={procedure_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ–∞–Ω—Å–∞ –ø–æ sessionId
        sessions_table = airtable.table(AIRTABLE_BASE_ID, "Sessions")
        session_records = sessions_table.all(formula=match({"sessionId": session_id}))
        
        if not session_records:
            return {
                "success": False,
                "message": f"–°–µ—Å—Å–∏—è —Å ID {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        session_record = session_records[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ procedureId
        procedures_table = airtable.table(AIRTABLE_BASE_ID, "Procedures")
        
        # ID –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        formula = f"{{procedureId}}='{procedure_id}'"
        procedure_records = procedures_table.all(formula=formula)
        
        if not procedure_records:
            return {
                "success": False,
                "message": f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å ID {procedure_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        procedure_record_id = procedure_records[0]["id"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏, –¥–æ–±–∞–≤–ª—è—è ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞
        sessions_table.update(
            session_record["id"], 
            {"procedureId": [procedure_record_id]}
        )
        
        return {
            "success": True,
            "sessionId": session_id,
            "procedureId": procedure_id
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫ —Å–µ—Å—Å–∏–∏: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫ —Å–µ—Å—Å–∏–∏: {str(e)}"
        }

def save_transcription(session_id, procedure_id, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ Airtable"""
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: session_id={session_id}, procedure_id={procedure_id}")
        print(f"–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: session_id={type(session_id)}, procedure_id={type(procedure_id)}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        transcriptions_table = airtable.table(AIRTABLE_BASE_ID, "Transcriptions")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ–∞–Ω—Å–∞ –ø–æ sessionId
        sessions_table = airtable.table(AIRTABLE_BASE_ID, "Sessions")
        session_records = sessions_table.all(formula=match({"sessionId": session_id}))
        
        if not session_records:
            return {
                "success": False,
                "message": f"–°–µ—Å—Å–∏—è —Å ID {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        session_record_id = session_records[0]["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ procedureId, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        procedure_record_id = None
        if procedure_id:
            procedures_table = airtable.table(AIRTABLE_BASE_ID, "Procedures")
            # ID –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            formula = f"{{procedureId}}='{procedure_id}'"
            procedure_records = procedures_table.all(formula=formula)
            
            if procedure_records:
                procedure_record_id = procedure_records[0]["id"]
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –Ω–æ–º–µ—Ä–æ–≤ –∑—É–±–æ–≤
        keywords = extract_keywords(text)
        print(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        teeth_mentioned = extract_teeth_numbers(text)
        print(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –∑—É–±–æ–≤: {teeth_mentioned}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcription_id = f"T{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
        record_data = {
            "transcriptionId": transcription_id,
            "sessionId": [session_record_id],  # –ú–∞—Å—Å–∏–≤ —Å ID –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏
            "text": text,
            "keywords": keywords,
            "teethMentioned": teeth_mentioned,
            "createdAt": datetime.now().strftime("%Y-%m-%d")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
        if procedure_record_id:
            record_data["procedureId"] = [procedure_record_id]
                
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {record_data}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        record = transcriptions_table.create(record_data)
        
        return {
            "success": True,
            "record_id": record["id"]
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"
        }

def extract_keywords(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—â–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    keywords = []
    medical_terms = [
        "–∫–∞—Ä–∏–µ—Å", "–ø–ª–æ–º–±–∞", "—á–∏—Å—Ç–∫–∞", "–±–æ–ª—å", "–∞–Ω–µ—Å—Ç–µ–∑–∏—è", "–∏–º–ø–ª–∞–Ω—Ç", 
        "–∫–æ—Ä–æ–Ω–∫–∞", "–º–æ—Å—Ç", "–±—Ä–µ–∫–µ—Ç—ã", "–ø–∞—Ä–æ–¥–æ–Ω—Ç–∏—Ç", "–ø—É–ª—å–ø–∏—Ç", "–∫–∞–Ω–∞–ª"
    ]
    
    for term in medical_terms:
        if term.lower() in text.lower():
            keywords.append(term)
    if len(keywords) == 0:
        keywords.append("–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    
    return ', '.join(keywords)

def extract_teeth_numbers(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑—É–±–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    
    # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ –∑—É–±–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ –æ—Ç 11 –¥–æ 48)
    pattern = r'\b([1-4][1-8])\b'
    teeth = re.findall(pattern, text)
    if len(teeth) == 0:
        teeth.append("–Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –∑—É–±–æ–≤")
    return ', '.join(teeth)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ PDF
def create_download_button(text, button_text, file_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ —Ñ–∞–π–ª–∞"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ base64
    b64 = base64.b64encode(text.encode()).decode()
    
    # –°–æ–∑–¥–∞–µ–º HTML –∫–Ω–æ–ø–∫—É
    button_html = f'''
    <a href="data:file/txt;base64,{b64}" download="{file_name}" target="_blank">
        <button style="background-color: #4CAF50; color: white; padding: 12px 20px; 
        border: none; border-radius: 4px; cursor: pointer; font-size: 16px; width: 100%;">
            {button_text} üì•
        </button>
    </a>
    '''
    return button_html

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'step' not in st.session_state:
    st.session_state.step = 'input_data'
if 'doctor_id' not in st.session_state:
    st.session_state.doctor_id = ''
if 'doctor_name' not in st.session_state:
    st.session_state.doctor_name = ''
if 'patient_id' not in st.session_state:
    st.session_state.patient_id = ''
if 'session_id' not in st.session_state:
    st.session_state.session_id = ''
if 'selected_procedure' not in st.session_state:
    st.session_state.selected_procedure = None
if 'procedure_confirmed' not in st.session_state:  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    st.session_state.procedure_confirmed = False
if 'audio_data' not in st.session_state:
    st.session_state.audio_data = None
if 'transcription' not in st.session_state:
    st.session_state.transcription = ""
if 'generated_report' not in st.session_state:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    st.session_state.generated_report = None
if 'new_patient_mode' not in st.session_state:
    st.session_state.new_patient_mode = False
if 'new_patient_pending' not in st.session_state:
    st.session_state.new_patient_pending = False
if 'custom_patient_code' not in st.session_state:
    st.session_state.custom_patient_code = None
if 'show_table_info' not in st.session_state:
    st.session_state.show_table_info = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
def get_table_structure(table_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã Airtable"""
    try:
        table = airtable.table(AIRTABLE_BASE_ID, table_name)
        records = table.all(max_records=1)
        
        if records:
            record = records[0]
            fields = record.get("fields", {})
            structure = {}
            
            for key, value in fields.items():
                structure[key] = {
                    "value": value,
                    "type": type(value).__name__
                }
                
            return {
                "success": True,
                "structure": structure
            }
        else:
            return {
                "success": False,
                "error": "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def go_to_step(step):
    st.session_state.step = step
    st.rerun()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
def toggle_new_patient_mode():
    st.session_state.new_patient_mode = not st.session_state.new_patient_mode
    st.rerun()

# –®–∞–≥ 1: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞ –∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
if st.session_state.step == 'input_data':
    st.subheader("Eingabe der Daten")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –¥–æ–∫—Ç–æ—Ä–æ–≤ –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    doctors_df = get_doctors()
    patients_df = get_patients()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if doctors_df.empty:
        st.warning("‚ö†Ô∏è In der Datenbank wurden keine √Ñrzte gefunden. Bitte √ºberpr√ºfen Sie die Airtable-Konfiguration.")
        
    if patients_df.empty and not st.session_state.new_patient_mode:
        st.info("‚ÑπÔ∏è Es gibt keine Patienten in der Datenbank. Sie k√∂nnen einen neuen Patienten hinzuf√ºgen.")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
    new_patient_mode = st.checkbox("Neuer Patient", value=st.session_state.new_patient_mode, key="new_patient_checkbox")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º state –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if new_patient_mode != st.session_state.new_patient_mode:
        st.session_state.new_patient_mode = new_patient_mode
        st.rerun()
    
    with st.form("patient_form"):
        # –í—ã–±–æ—Ä –¥–æ–∫—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        doctor_options = doctors_df["id"].tolist()
        doctor_id = st.selectbox(
            "W√§hlen Sie einen Arzt", 
            options=doctor_options,
            format_func=lambda x: f"{x} - {doctors_df[doctors_df['id'] == x]['name'].iloc[0] if not doctors_df[doctors_df['id'] == x].empty else 'Kein Name'}"
        ) if doctor_options else st.text_input("Arzt-ID")
        
        if st.session_state.new_patient_mode:
            # –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–±–µ–∑ –∏–º–µ–Ω–∏)
            custom_patient_code = st.text_input(
                "Patienten-ID (optional)", 
                placeholder="Wenn nicht angegeben, wird automatisch generiert"
            )
            patient_id = None
        else:
            # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            patient_options = patients_df["id"].tolist()
            patient_id = st.selectbox(
                "W√§hlen Sie einen Patienten", 
                options=patient_options,
                format_func=lambda x: f"Patient #{x}" 
            ) if patient_options else None
            custom_patient_code = None
        
        submit_button = st.form_submit_button("Weiter")
        
        if submit_button:
            if doctor_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                st.session_state.doctor_id = doctor_id
                if doctor_options:
                    st.session_state.doctor_name = doctors_df[doctors_df["id"] == doctor_id]["name"].values[0]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
                if st.session_state.new_patient_mode:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    st.session_state.custom_patient_code = custom_patient_code
                    st.session_state.new_patient_pending = True
                    go_to_step('confirm_data')
                else:
                    # –í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    if patient_id:
                        st.session_state.patient_id = patient_id
                        go_to_step('confirm_data')
                    else:
                        st.error("Bitte w√§hlen Sie einen Patienten")
            else:
                st.error("Bitte w√§hlen Sie einen Arzt")

# –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
elif st.session_state.step == 'confirm_data':
    st.subheader("Datenbest√§tigung")
    
    st.info("Bitte √ºberpr√ºfen Sie die eingegebenen Daten:")
    
    st.write(f"**Arzt:** {st.session_state.doctor_name} (ID: {st.session_state.doctor_id})")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ
    if hasattr(st.session_state, 'new_patient_pending') and st.session_state.new_patient_pending:
        patient_code_display = st.session_state.custom_patient_code if st.session_state.custom_patient_code else "Automatisch generierte ID"
        st.write(f"**Patient:** Neuer Patient ({patient_code_display})")
    else:
        st.write(f"**Patient:** #{st.session_state.patient_id}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚úÖ Best√§tigen"):
            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å–µ–π—á–∞—Å
            if hasattr(st.session_state, 'new_patient_pending') and st.session_state.new_patient_pending:
                response = create_patient(st.session_state.custom_patient_code)
                if response.get("success"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    st.session_state.patient_id = response.get("patientId")
                    st.success(f"Neuer Patient mit ID #{response.get('patientId')} erstellt")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
                    st.session_state.new_patient_pending = False
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if hasattr(st.session_state, 'custom_patient_code'):
                        del st.session_state.custom_patient_code
                else:
                    st.error(f"Fehler beim Erstellen des Patienten: {response.get('error', 'Unbekannter Fehler')}")
                    go_to_step('input_data')
                    st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Airtable
            response = create_session(
                st.session_state.doctor_id,
                st.session_state.patient_id
            )
            
            if response.get("success"):
                st.session_state.session_id = response.get("sessionId")
                st.success("Daten erfolgreich gespeichert!")
                go_to_step('select_procedure')
            else:
                st.error(f"Fehler bei der Datenverarbeitung: {response.get('message', 'Unbekannter Fehler')}")
    
    with col2:
        if st.button("üîÑ Bearbeiten"):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
            st.session_state.new_patient_pending = False
            go_to_step('input_data')

# –®–∞–≥ 3: –í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
elif st.session_state.step == 'select_procedure':
    st.subheader("Verfahrensauswahl")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    st.info(f"""
    **Arzt:** {st.session_state.doctor_name} (ID: {st.session_state.doctor_id})
    **Patient:** #{st.session_state.patient_id}
    **Session ID:** {st.session_state.session_id}
    """)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    st.markdown("<hr/>", unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä
    procedures_df = get_procedures()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = procedures_df['category'].unique().tolist()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–º–µ—Å—Ç–æ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    st.markdown("<h3 class='category-heading'>W√§hlen Sie eine Verfahrenskategorie</h3>", unsafe_allow_html=True)
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—å—à–µ 5, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∫–ª–∞–¥–∫–∏, –∏–Ω–∞—á–µ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
    if len(categories) <= 5:
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selected_category = st.tabs(categories)
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for i, category in enumerate(categories):
            with selected_category[i]:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                filtered_procedures = procedures_df[procedures_df['category'] == category]
                
                if filtered_procedures.empty:
                    st.info(f"Keine verf√ºgbaren Verfahren in der Kategorie '{category}'.")
                else:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    procedures_list = filtered_procedures.to_dict('records')
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    st.markdown("### W√§hlen Sie ein Verfahren")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä
                    for procedure in procedures_list:
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π —Å–ø—Ä–∞–≤–∞
                        col1, col2 = st.columns([4, 1])
                        
                        with col1:
                            st.markdown(f"""
                            <div class="procedure-item">
                                <strong class="procedure-name">{procedure['name']}</strong>
                                <p class="procedure-description">
                                    {procedure['description'][:80]}{'...' if len(procedure['description']) > 80 else ''}
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with col2:
                            # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                            if st.button("W√§hlen", key=f"select_{category}_{procedure['id']}", use_container_width=True):
                                st.session_state.selected_procedure = procedure
                                
                                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –∫ —Å–µ—Å—Å–∏–∏
                                response = add_procedure_to_session(
                                    st.session_state.session_id,
                                    procedure['id'],
                                    procedure['name']
                                )
                                
                                if response.get("success"):
                                    st.success(f"Verfahren '{procedure['name']}' ausgew√§hlt!")
                                    go_to_step('confirm_procedure')
                                else:
                                    st.error(f"Fehler bei der Verfahrensauswahl: {response.get('error', 'Unbekannter Fehler')}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        with st.expander("üìã Mehr Details zum Verfahren"):
                            st.markdown(f"""
                            <div class="procedure-details">
                                <h4>{procedure['name']}</h4>
                                <p>{procedure['description']}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
                        st.markdown("<div class='procedure-spacer'></div>", unsafe_allow_html=True)
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        selected_category = st.selectbox("W√§hlen Sie eine Kategorie", categories)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        filtered_procedures = procedures_df[procedures_df['category'] == selected_category]
        
        if not filtered_procedures.empty:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            procedures_list = filtered_procedures.to_dict('records')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            st.markdown("### W√§hlen Sie ein Verfahren")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä
            for procedure in procedures_list:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π —Å–ø—Ä–∞–≤–∞
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    st.markdown(f"""
                    <div class="procedure-item">
                        <strong class="procedure-name">{procedure['name']}</strong>
                        <p class="procedure-description">
                            {procedure['description'][:80]}{'...' if len(procedure['description']) > 80 else ''}
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                    if st.button("W√§hlen", key=f"select_{selected_category}_{procedure['id']}", use_container_width=True):
                        st.session_state.selected_procedure = procedure
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –∫ —Å–µ—Å—Å–∏–∏
                        response = add_procedure_to_session(
                            st.session_state.session_id,
                            procedure['id'],
                            procedure['name']
                        )
                        
                        if response.get("success"):
                            st.success(f"Verfahren '{procedure['name']}' ausgew√§hlt!")
                            go_to_step('confirm_procedure')
                        else:
                            st.error(f"Fehler bei der Verfahrensauswahl: {response.get('error', 'Unbekannter Fehler')}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                with st.expander("üìã Mehr Details zum Verfahren"):
                    st.markdown(f"""
                    <div class="procedure-details">
                        <h4>{procedure['name']}</h4>
                        <p>{procedure['description']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
                st.markdown("<div class='procedure-spacer'></div>", unsafe_allow_html=True)
        else:
            st.info(f"Keine verf√ºgbaren Verfahren in der Kategorie '{selected_category}'.")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    st.markdown("<hr/>", unsafe_allow_html=True)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    if st.button("‚¨ÖÔ∏è Zur√ºck", use_container_width=True):
        go_to_step('confirm_data')

# –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
elif st.session_state.step == 'confirm_procedure':
    st.subheader("Best√§tigung der Verfahrensauswahl")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    st.info(f"""
    **Arzt:** {st.session_state.doctor_name} (ID: {st.session_state.doctor_id})
    **Patient:** #{st.session_state.patient_id}
    **Session ID:** {st.session_state.session_id}
    """)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
    st.markdown("### Ausgew√§hltes Verfahren")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è CSS-–∫–ª–∞—Å—Å
    st.markdown(f"""
    <div class="selected-procedure-card">
        <h3>{st.session_state.selected_procedure['name']}</h3>
        <p><strong>Kategorie:</strong> {st.session_state.selected_procedure['category']}</p>
        <p>{st.session_state.selected_procedure['description']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Zur√ºck zur Verfahrensauswahl"):
            go_to_step('select_procedure')
    
    with col2:
        if st.button("‚úÖ Best√§tigen und fortfahren", use_container_width=True):
            st.session_state.procedure_confirmed = True
            go_to_step('record_voice')

# –®–∞–≥ 5: –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
elif st.session_state.step == 'record_voice':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
    if not st.session_state.procedure_confirmed:
        st.warning("Zuerst m√ºssen Sie die Verfahrensauswahl best√§tigen")
        go_to_step('confirm_procedure')
    else:
        st.subheader("Sprachaufzeichnung")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
        st.info(f"""
        **Arzt:** {st.session_state.doctor_name} (ID: {st.session_state.doctor_id})
        **Patient:** #{st.session_state.patient_id}
        **Verfahren:** {st.session_state.selected_procedure['name']}
        """)
        
        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        st.write("### Sprachaufzeichnung des Arztes")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Streamlit –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç st.audio_input –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
            audio_data = st.audio_input("Klicken Sie, um die Aufnahme zu starten")
            
            if audio_data is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                st.session_state.audio_data = audio_data
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
                st.audio(audio_data, format="audio/wav")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                if st.button("üìù Transkribieren"):
                    st.info("Audio wird zur Transkription gesendet...")
                    
                    with st.spinner("Transkription l√§uft..."):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                        if not openai_client:
                            st.error("OpenAI API nicht konfiguriert. Bitte in den Einstellungen konfigurieren.")
                            st.session_state.transcription = "OpenAI API nicht konfiguriert. Beispieltext wird verwendet."
                        else:
                            try:
                                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI API
                                transcription_result = transcribe_audio_with_openai(audio_data)
                                
                                if transcription_result.startswith("–û—à–∏–±–∫–∞:"):
                                    st.error(transcription_result)
                                    st.session_state.transcription = "Beispiel f√ºr transkribierten Text. In einem realen Projekt wird hier der vom Spracherkennungsmodell erhaltene Text stehen."
                                else:
                                    st.success("Transkription erfolgreich!")
                                    st.session_state.transcription = transcription_result
                            except Exception as e:
                                st.error(f"Fehler bei der Transkription: {str(e)}")
                                st.session_state.transcription = "Beispiel f√ºr transkribierten Text. In einem realen Projekt wird hier der vom Spracherkennungsmodell erhaltene Text stehen."
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    go_to_step('show_transcription')
        except Exception as e:
            st.error(f"Fehler bei der Audioaufnahme: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        if st.button("‚¨ÖÔ∏è Zur√ºck zur Verfahrensauswahl"):
            go_to_step('select_procedure')

# –®–∞–≥ 6: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
elif st.session_state.step == 'show_transcription':
    st.subheader("Transkriptionsergebnis")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    st.info(f"""
    **Arzt:** {st.session_state.doctor_name} (ID: {st.session_state.doctor_id})
    **Patient:** #{st.session_state.patient_id}
    **Verfahren:** {st.session_state.selected_procedure['name']}
    """)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    st.write("### Transkribierter Text")
    
    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    transcription = st.text_area(
        "Sie k√∂nnen den Text bei Bedarf bearbeiten:",
        value=st.session_state.transcription,
        height=200
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
    with st.expander("Bericht generieren", expanded=True):
        language_options = {
            'auto': 'Automatisch',
            'ru': 'Russisch',
            'de': 'Deutsch'
        }
        
        language = st.selectbox(
            "Sprache des Berichts",
            options=list(language_options.keys()),
            format_func=lambda x: language_options.get(x, x)
        )

        output_format = st.selectbox(
            "Ausgabeformat",
            options=['markdown', 'json'],
            format_func=lambda x: 'Markdown (lesbarer Text)' if x == 'markdown' else 'JSON (strukturierte Daten)'
        )
        
        if st.button("Bericht generieren"):
            if not transcription:
                st.error("Bitte geben Sie einen Transkriptionstext ein.")
            else:
                with st.spinner("Bericht wird generiert..."):
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
                        procedure_info = {
                            "id": st.session_state.selected_procedure['id'],
                            "category": st.session_state.selected_procedure['category'],
                            "name": st.session_state.selected_procedure['name'],
                            "description": st.session_state.selected_procedure.get('description', '')
                        }
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                        report = generate_dental_report(
                            transcription=transcription,
                            language='auto' if language == 'auto' else language,
                            procedure_id=procedure_info['id'],
                            category=procedure_info['category'],
                            procedure=procedure_info['name'],
                            procedure_info=procedure_info
                        )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if output_format == 'markdown':
                            st.markdown(report)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                            st.markdown("### –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç")
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
                            md_filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
                            st.markdown(create_download_button(report, "–°–∫–∞—á–∞—Ç—å –∫–∞–∫ Markdown", md_filename), unsafe_allow_html=True)
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                            json_filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                            st.markdown(create_download_button(json.dumps(report, ensure_ascii=False, indent=2), 
                                                              "–°–∫–∞—á–∞—Ç—å –∫–∞–∫ JSON", json_filename), unsafe_allow_html=True)
                        else:
                            st.json(report)
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                            json_filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                            st.markdown(create_download_button(json.dumps(report, ensure_ascii=False, indent=2), 
                                                              "–°–∫–∞—á–∞—Ç—å –∫–∞–∫ JSON", json_filename), unsafe_allow_html=True)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        st.session_state.generated_report = report
                        
                    except Exception as e:
                        st.error(f"Fehler bei der Berichtsgenerierung: {str(e)}")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Zur√ºck zur Aufnahme"):
            go_to_step('record_voice')
    
    with col2:
        if st.button("‚úÖ Speichern und beenden"):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ Airtable
            response = save_transcription(
                st.session_state.session_id,
                st.session_state.selected_procedure['id'],
                transcription
            )
            
            if response.get("success"):
                st.success("Transkription erfolgreich gespeichert!")
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                for key in ['doctor_id', 'doctor_name', 'patient_id', 'session_id', 
                           'selected_procedure', 'procedure_confirmed', 'audio_data', 
                           'transcription', 'generated_report']:
                    if key in st.session_state:
                        st.session_state[key] = '' if key in ['doctor_id', 'doctor_name', 'patient_id', 
                                                              'session_id', 'transcription'] else None
                go_to_step('input_data')
            else:
                st.error(f"Fehler beim Speichern der Transkription: {response.get('error', 'Unbekannter Fehler')}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
with st.expander("Debug-Informationen"):
    st.write("Aktueller Status:")
    debug_info = {
        "step": st.session_state.step,
        "doctor_id": st.session_state.doctor_id,
        "doctor_name": st.session_state.doctor_name,
        "patient_id": st.session_state.patient_id,
        "session_id": st.session_state.session_id,
        "selected_procedure": st.session_state.selected_procedure,
        "procedure_confirmed": st.session_state.procedure_confirmed,
        "has_audio_data": st.session_state.audio_data is not None,
        "transcription_length": len(st.session_state.transcription) if st.session_state.transcription else 0,
        "new_patient_mode": st.session_state.new_patient_mode,
        "new_patient_pending": st.session_state.new_patient_pending,
        "custom_patient_code": st.session_state.custom_patient_code,
        "openai_api_configured": openai_client is not None
    }
    st.json(debug_info)
    
    # –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
    st.write("### API Status")
    api_status = {
        "airtable_api": bool(AIRTABLE_API_KEY),
        "openai_api": bool(OPENAI_API_KEY),
        "openai_client_initialized": openai_client is not None
    }
    st.json(api_status)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    st.write("### Airtable-Tabelleninformationen")
    show_table_info = st.checkbox("Tabellenstruktur anzeigen", value=st.session_state.show_table_info)
    st.session_state.show_table_info = show_table_info
    
    if show_table_info:
        tables = ["Doctors", "Patients", "Sessions", "Procedures", "Transcriptions"]
        
        for table_name in tables:
            st.write(f"#### Tabelle: {table_name}")
            result = get_table_structure(table_name)
            
            if result["success"]:
                st.json(result["structure"])
            else:
                st.error(f"Fehler beim Abrufen der Tabellenstruktur {table_name}: {result['error']}")


# end
                
                